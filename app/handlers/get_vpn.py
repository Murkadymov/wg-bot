import subprocess
from aiogram import Router, types, F
from aiogram.types import FSInputFile
from sqlalchemy.exc import DatabaseError

from app.keyboards.menu_buttons import menu_buttons
from app.logger.setup_logger import get_logger
from app.models.user import UserModel
from app.repository.users import UserRepository
from app.vpnmanager.generate_client import generate_client_conf, add_peer_persistent
from app.vpnmanager.keys import generate_private_key, generate_public_key
from app.vpnmanager.parser import get_next_free_ip

logger = get_logger(__name__)
router = Router()


async def _issue_vpn_for(user: types.User, reply_to: types.Message):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–¥–∞—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    kb = menu_buttons()

    db_user = UserModel(
        id=user.id,
        username=user.username,
        full_name=user.full_name,
    )

    private_key = generate_private_key()
    public_key = generate_public_key(private_key)
    free_ip = get_next_free_ip()

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º client.conf
    try:
        conf_path = generate_client_conf(db_user.id, private_key, free_ip)
    except OSError:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ client.conf –¥–ª—è user_id={db_user.id}")
        await reply_to.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥ (–æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã) üôè")
        return
    except Exception:
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ client.conf –¥–ª—è user_id={db_user.id}")
        await reply_to.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –í–ü–ù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º peer –≤ wg0
    try:
        add_peer_persistent(public_key, free_ip)
    except subprocess.CalledProcessError:
        logger.exception(f"–ö–æ–º–∞–Ω–¥–∞ wg –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –¥–ª—è user_id={db_user.id}")
        await reply_to.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ VPN-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä üôè")
        return
    except Exception:
        logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ peer –¥–ª—è user_id={db_user.id}")
        await reply_to.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
        return

    conf_file = FSInputFile(conf_path)

    try:
        UserRepository.add_user(
            user_id=db_user.id,
            username=db_user.username,
            full_name=db_user.full_name,
            public_key=public_key,
            ip_address=free_ip,
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.id} –≤ –±–∞–∑—É")
        raise DatabaseError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î") from e

    await reply_to.answer_document(
        document=conf_file,
        caption="–í–æ—Ç —Ç–≤–æ–π VPN-–∫–æ–Ω—Ñ–∏–≥ üöÄ\n–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard",
        reply_markup=kb,
    )


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@router.message(F.text.in_(["/getvpn", "–ü–æ–ª—É—á–∏—Ç—å VPN"]))
async def get_vpn_cmd(message: types.Message):
    await _issue_vpn_for(message.from_user, message)


@router.callback_query(F.data == "getvpn")
async def get_vpn_cb(callback: types.CallbackQuery):
    await _issue_vpn_for(callback.from_user, callback.message)
    await callback.answer()
